spring.application.name=course-service
server.port=8081

# when server receives a SIGTERM, stop accepting new requests but complete that are in progress
# within default 30 seconds https://habr.com/en/companies/maxilect/articles/666090/
server.shutdown=graceful

# Tomcat configuration
# Tell Tomcat how long to wait after opening a connection before receiving a request
# This can help protect against DoS attacks, when a client opens a connection but does not send a request
# This is also the time Tomcat will spend reading the request body
server.tomcat.connection-timeout=3s
# Time Tomcat keeps a connection open, waiting for new requests
server.tomcat.keep-alive-timeout=20s
# Tomcat uses a thread pool to handle incoming connections: one connection = one thread. By default, max 200
server.tomcat.threads.max=200
# Minimum number of threads that will be created in the pool at server startup
server.tomcat.threads.min-spare=10
# time during which current requests will be processed after receiving the SIGTERM signal
spring.lifecycle.timeout-per-shutdown-phase=30s

# DataSource configuration
spring.datasource.username=user
spring.datasource.password=password
spring.datasource.url=jdbc:postgresql://localhost:25432/course_service_db

# Timeout for acquiring a connection from the pool (in milliseconds)
spring.datasource.hikari.connection-timeout=2000
# HikariCP configuration
# HikariCP experts recommend using the formula: connections = ((core_count * 2) + effective_spindle_count)
# Where core_count = number of CPU cores
# effective_spindle_count = number of spinning disks (0 for SSD)
# For example, if cores = 4, maximum-pool-size = 8
# https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
spring.datasource.hikari.maximum-pool-size=8

# JPA / Hibernate
# Disable Open-In-View pattern to avoid potential performance issues and lazy loading exceptions
spring.jpa.open-in-view=false
# Validate database schema matches JPA entities
spring.jpa.hibernate.ddl-auto=validate
# Hibernate SQL formatting for better readability in logs
spring.jpa.properties.hibernate.format_sql=true
# Show SQL statements in logs for debugging
spring.jpa.properties.hibernate.show_sql=true

#Swagger UI http://localhost:8081/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

api.menu-create.summary=Create a menu item
api.menu-create.description=Creates a dish and saves it to the database. Returns information about the created dish, including its identifier.

api.menu-delete.summary=Delete a menu item
api.menu-delete.description=Deletes a dish by its identifier.

api.menu-update.summary=Update a menu item
api.menu-update.description=Updates a dish according to the parameters passed in the request body.

api.menu-get.summary=Get a menu item
api.menu-get.description=Returns information about a dish by its identifier.

api.menu-list-get.summary=Get a list of menu items
api.menu-list-get.description=Returns a list of dishes from the specified category. The list may be empty if there are no dishes in that category. \
Available categories: breakfast, lunch, dinner, drinks, snacks, salads. \
The list is sorted according to the specified sort parameter. \
Available sorting options: \
az - sort by name in ascending alphabetical order; \
za - sort by name in descending order; \
price_asc - sort by price ascending; \
price_desc - sort by price descending; \
date_asc - sort by menu creation date ascending; \
date_desc - sort by menu creation date descending.

api.menu-info.summary=Get price and availability information for menu items
api.menu-info.description=Returns information about the price, name, and availability of a dish in the restaurant. If the dish is not available, \
its price will be represented as null. Although the semantics fully correspond to an HTTP GET request, POST is used instead because the request body \
may contain a long list of dish names.

api.response.createOk=The dish was successfully created.
api.response.createConflict=The dish was not created because a dish with the same name already exists in the database.
api.response.createBadRequest=The dish was not created because the request contains errors. See the error message for more details.
api.response.deleteNoContent=The dish with this identifier has been removed from the database.
api.response.updateOk=The dish was successfully updated.
api.response.notFound=A dish with this identifier was not found in the database.
api.response.updateBadRequest=The dish was not updated because the request contains errors. See the error message for more details.
api.response.getOk=The dish was successfully found.
api.response.getListOk=The list of dishes for the category was successfully generated.
api.response.getListBadRequest=The list of dishes could not be generated because the request contains invalid parameters.
api.response.getMenuInfoBadRequest=Information about the dishes could not be generated because the request contains invalid parameters (empty list of names).
api.response.getMenuInfoOk=Information about the dishes was successfully generated.

